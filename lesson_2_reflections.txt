What happens when you initialize a repository? Why do you need to do it?

Initializing a responsitory sets up the git structure for the files in the 
directory.  This must occur before files can be archived or tracked.

How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area provides intermediate/working storage for files the 
respository.  This allows users to work on a commit set, refine it, and 
commit when happy with the staged files and commit.

How can you use the staging area to make sure you have one commit per 
logical change?

The staging area allow for files to be added to the commit set and 
compared to the repository.  Diligence in using the staging area and the 
add and commit commands is required.

What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

Branches can be used for experimental changes, working changes for 
various users, and patches for released code.  Branches are helpful in 
that they keep the associated code bundled together for access as a unit.

How do the diagrams help you visualize the branch structure?

Diagrams provide a visual representation of commits and branches and show 
how the tree structure of the respository looks.

What is the result of merging two branches together? Why do we represent 
it in the diagram the way we do?

Merging branches combines the code from both branhces.  The diagram is a 
visual of the branches and the revisions and what will be included in the 
final version of the branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing 
merges manually?

Pros of automatic merging:  Git takes care of the simple merges for the 
programmer.  This saves time and improves accuracy over manual merging.



